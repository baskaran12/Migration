------------349
With B as (
SELECT /*+ PARALLEL(B,$ORA_PARALLEL) */ LEGACY_CONTACT_ID AS LEGACY_CONTACT_ID FROM migration_10.uf_contact A
MINUS
SELECT /*+ PARALLEL (A,$ORA_PARALLEL) */ LEGACY_CONTACT_ID FROM migration_10.UF_CON_ROLES C)
SELECT DISTINCT STG.LEGACY_ACCOUNT_NO LEGACY_CUST_ID,STG.SOURCE_SYSTEM,B.LEGACY_CONTACT_ID,
CASE WHEN STG.LEGACY_ACCOUNT_NO  NOT IN 
(select ACCOUNT_NAME from APP_2.APP_SV_BILL_ADD_ELOC_SUCESS WHERE MODIFY_DTS IS NULL AND ACCOUNT_NAME IS NOT NULL)
AND STG.LEGACY_ACCOUNT_NO NOT IN (select ACCOUNT_NAME from APP_2.APP_SV_TAX_ADD_ELOC_SUCESS WHERE MODIFY_DTS IS NULL AND ACCOUNT_NAME IS NOT NULL) 
--OR (STG.LEGACY_ACCOUNT_NO NOT IN (SELECT LEGACY_CUST_ID FROM migration_10.UF_CUSTOMER))
THEN 'BILLING AND  TAX MISSES'
ELSE 'NEED TO CHECK' END AS  RCA
FROM migration_10.STG_COMP_FINAL STG INNER JOIN B 
ON STG.LEGACY_CONTACT_ID=B.LEGACY_CONTACT_ID
WHERE  STG.SOURCE_SYSTEM NOT IN ('CEN','WB','WT');


With B as (
SELECT /*+ PARALLEL(B,$ORA_PARALLEL) */ LEGACY_CONTACT_ID AS LEGACY_CONTACT_ID FROM migration_10.uf_contact A
MINUS
SELECT /*+ PARALLEL (A,$ORA_PARALLEL) */ LEGACY_CONTACT_ID FROM migration_10.UF_CON_ROLES C)
SELECT DISTINCT HIER.ROOT_ACCOUNT_NAME,
--STG.LEGACY_ACCOUNT_NO LEGACY_CUST_ID,STG.SOURCE_SYSTEM,B.LEGACY_CONTACT_ID,STG.UNI_ID,HIER.FINAL_SCHEMA,
CASE WHEN HIER.FINAL_SCHEMA ='ME' AND  STG.UNI_ID
IN (SELECT IDENTIFIER FROM migration_6.STG_SRC_SUBSCRIBER_LOB WHERE LEGACY_SITE_ID IS NULL) THEN 'SITES NULL'
WHEN HIER.FINAL_SCHEMA ='AV' AND  STG.UNI_ID
IN (SELECT IDENTIFIER FROM migration_8.STG_SRC_SUBSCRIBER_LOB WHERE LEGACY_SITE_ID IS NULL) THEN 'SITES NULL'
WHEN HIER.FINAL_SCHEMA ='BCV' AND  STG.UNI_ID
IN (SELECT IDENTIFIER FROM migration_9.STG_SRC_SUBSCRIBER_LOB WHERE LEGACY_SITE_ID IS NULL) THEN 'SITES NULL'

WHEN STG.UNI_ID NOT IN (select EPID from APP_2.APP_CLIPS_ADDRESS_ELOC_SUCESS WHERE MODIFY_DTS IS NULL AND EPID IS NOT NULL) THEN 'SITES MISSES IN CLIPS-383'
ELSE 'NEED TO CHECK' END AS RCA
FROM migration_10.STG_COMP_FINAL STG,B ,APP_2.CUST_HIERARCHY HIER
WHERE STG.LEGACY_CONTACT_ID=B.LEGACY_CONTACT_ID AND STG.LEGACY_ACCOUNT_NO=HIER.ACCOUNT_NAME
AND STG.SOURCE_SYSTEM  IN ('CEN','WB','WT');


------------------------312


WITH CUST_312 AS (
select legacy_cust_id,legacy_sub_no,LEGACY_PRODUCT_OFFER,LEGACY_SITE_ID from migration_10.uf_subscriber where legacy_sub_no in (select legacy_sub_no from (
SELECT /*+ PARALLEL(B,$ORA_PARALLEL) */ distinct LEGACY_SUB_NO,LEGACY_SITE_ID 
FROM migration_10.UF_SUBSCRIBER A, migration_10.CONV_TT T 
WHERE  T.TRANS_GROUP='TRANS_EPC_OFFER' AND T.INPUT_VAL1=A.LEGACY_PRODUCT_OFFER AND T.INPUT_VAL2='S' AND T.OUTPUT_VAL6 not in ('EVC')
MINUS 
SELECT /*+ PARALLEL (A,$ORA_PARALLEL) */ LEGACY_ENTITY_ID, LEGACY_SITE_ID FROM migration_10.UF_CON_ROLES C 
WHERE RECORD_LEVEL = 'S' )))

 

SELECT 
legacy_cust_id,legacy_sub_no,LEGACY_PRODUCT_OFFER,LEGACY_SITE_ID ,CASE WHEN LEGACY_SITE_ID IS NULL THEN 'SITES NULL' 
WHEN LEGACY_PRODUCT_OFFER ='Site Access'  
AND legacy_sub_no NOT IN (SELECT INDEP_SUB_ID FROM migration_10.UF_SUB_ASSOCIATION UNION ALL SELECT DEP_SUB_ID FROM migration_10.UF_SUB_ASSOCIATION)
THEN 'NO ASSOCIATION FOR SITE ACCESS'
WHEN LEGACY_SITE_ID NOT IN (select LOCATIONID from APP_2.APP_CLIPS_ADDRESS_ELOC_SUCESS WHERE MODIFY_DTS IS NULL AND LOCATIONID IS NOT NULL)
THEN 'SITE MISSES IN CLIPS'
WHEN legacy_sub_no IN (SELECT LEGACY_ENTITY_ID FROM migration_10.UF_CON_ROLES)
THEN 'SUBNO IS PRESENT IN CONROLES ,ITS DUE TO SUBNO HAVING ONE NULL AND VALID SITE'
ELSE 'NEED TO CHECK' END AS RCA
FROM CUST_312;

-------------672
WITH VQ_672 AS (
SELECT DISTINCT LEGACY_CUST_ID,
A.SOURCE_SYSTEM,
  LEGACY_CONTACT_ID,
  legacy_sub_no,
  c.legacy_site_id,
  c.LEGACY_ADDRESS_ID,
  ELOC_LOCATION_ID
FROM migration_10.uf_address a,
  migration_10.uf_con_roles c,
  migration_10.uf_subscriber s
WHERE a.LEGACY_ADDRESS_ID = c.LEGACY_ADDRESS_ID
AND c.LEGACY_ENTITY_ID    = s.LEGACY_SUB_NO
AND((ELOC_LOCATION_ID    IS NULL
OR ELOC_LOCATION_ID       =0))
AND s.access_provider     ='Comcast'
AND c.RECORD_LEVEL        = 'S')

SELECT DISTINCT LEGACY_CUST_ID,HIER.FINAL_SCHEMA,LEGACY_ADDRESS_ID,
CASE WHEN HIER.FINAL_SCHEMA='ME' AND LEGACY_ADDRESS_ID  IN 
(select locationid from APP_2.APP_CLIPS_ADDRESS_ELOC_SUCESS  where modify_dts is null AND STD_ELOC_LOCATION_ID IS NOT NULL
AND EPID IN (SELECT  IDENTIFIER FROM migration_6.STG_SRC_SUBSCRIBER_LOB)
)
THEN 'NEED TO CHECK-MIGHT BE ONE NULL AND ONE VALID ELOC IN SRC'
WHEN HIER.FINAL_SCHEMA='AV' AND LEGACY_ADDRESS_ID  IN 
(select locationid from APP_2.APP_CLIPS_ADDRESS_ELOC_SUCESS  where modify_dts is null AND STD_ELOC_LOCATION_ID IS NOT NULL
AND EPID IN (SELECT  IDENTIFIER FROM migration_8.STG_SRC_SUBSCRIBER_LOB)
)
THEN 'NEED TO CHECK-MIGHT BE ONE NULL AND ONE VALID ELOC IN SRC'
WHEN HIER.FINAL_SCHEMA='BCV' AND LEGACY_ADDRESS_ID  IN 
(select locationid from APP_2.APP_CLIPS_ADDRESS_ELOC_SUCESS  where modify_dts is null AND STD_ELOC_LOCATION_ID IS NOT NULL
AND EPID IN (SELECT  IDENTIFIER FROM migration_9.STG_SRC_SUBSCRIBER_LOB)
)
THEN 'NEED TO CHECK-MIGHT BE ONE NULL AND ONE VALID ELOC IN SRC'
WHEN SOURCE_SYSTEM='CSG'
THEN 'NEED TO CHECK IN CSG SRC'
ELSE 'ELOC NULL IN SRC' END AS RCA
FROM 
VQ_672 VQ,APP_2.CUST_HIERARCHY HIER WHERE VQ.LEGACY_CUST_ID=HIER.ACCOUNT_NAME;


----------
---541
WITH VQ_541 AS (
select DISTINCT b.LEGACY_CUST_ID, b.LEGACY_SITE_ID,A.SOURCE_SYSTEM,A.ADR_LINE_1,A.STATE_CODE,A.CITY,A.ZIPCODE
from migration_10.uf_address a , migration_10.uf_site b , migration_10.IC_541 c
where a.LEGACY_ADDRESS_ID = b.LEGACY_ADDR_ID
and b.LEGACY_CUST_ID = c.LEGACY_CUST_ID
and UPPER(a.city) = UPPER(c.city)
and UPPER(a.ADR_LINE_1) = UPPER(c.ADR_LINE_1)
and a.ZIPCODE = c.ZIPCODE
and NVL(a.UNIT_TYPE, 'XXX') = NVL(c.UNIT_TYPE, 'XXX')
and NVL(a.UNIT_value, 'XXX') = NVL(c.UNIT_VALUE, 'XXX')
and nvl(a.UNIT_TYPE_2, 'xxx') = nvl(c.UNIT_TYPE_2 , 'xxx')
and NVL(a.UNIT_value_2, 'XXX') = NVL(c.UNIT_VALUE_2, 'XXX')
and nvl(a.UNIT_TYPE_3, 'xxx') = nvl(c.UNIT_TYPE_3 , 'xxx')
and NVL(a.UNIT_value_3, 'XXX') = NVL(c.UNIT_VALUE_3, 'XXX')),

COL_LIST AS (

SELECT DISTINCT ADR_LINE_1,ADDRESS_TYPE,LISTAGG(COL_NAME,',') OVER (PARTITION BY ADR_LINE_1,ADDRESS_TYPE)  COL_LIST_DIFF_VALS
FROM (
SELECT ADR_LINE_1,ADDRESS_TYPE,COL_NAME
FROM (
SELECT ADR_LINE_1,ADDRESS_TYPE,COL_NAME, COL_VAL FROM (
SELECT ADR_LINE_1,ADDRESS_TYPE,LEGACY_ADDRESS_ID,POST_OFFICE_BOX, STREET_NAME, STREET_NUMBER, APARTMENT, LONGITUDE, LATITUDE, COUNTY, GEOCODE, BUSINESS_UNIT_ID,
CLLI_CODE, CENSUS_BLOCK, NVL(NAX_ID,'XXXX') NAX_ID, FRANCHISE_TAX_AREA, ATTN_TO, HOUSE_NUMBER_PREFIX, HOUSE_NUMBER_SUFFIX, STREET_PRE_DIRECTION, STREET_SUFFIX, STREET_POST_DIRECTION,
DIVISION, REGION, MARKET, SUB_MARKET, NVL(ELOC_LOCATION_ID,'XXXX') ELOC_LOCATION_ID, CRAN, TO_CHAR(ATHENA_ADDRESS_ID)  ATHENA_ADDRESS_ID, TO_CHAR(ATHENA_BUILDING_ID) ATHENA_BUILDING_ID, ACCESS_PROVIDER, CUID, ZIP_EXTENSION, RATE_CENTER
FROM migration_10.uf_address
--WHERE ADR_LINE_1='3810 PLAINFIELD RD'
)
UNPIVOT (COL_VAL FOR COL_NAME IN (LEGACY_ADDRESS_ID,POST_OFFICE_BOX, STREET_NAME, STREET_NUMBER, APARTMENT, LONGITUDE, LATITUDE, COUNTY, GEOCODE, BUSINESS_UNIT_ID,
CLLI_CODE, CENSUS_BLOCK, NAX_ID, FRANCHISE_TAX_AREA, ATTN_TO, HOUSE_NUMBER_PREFIX, HOUSE_NUMBER_SUFFIX, STREET_PRE_DIRECTION, STREET_SUFFIX, STREET_POST_DIRECTION,
DIVISION, REGION, MARKET, SUB_MARKET, ELOC_LOCATION_ID, CRAN, ATHENA_ADDRESS_ID , ATHENA_BUILDING_ID, ACCESS_PROVIDER, CUID, ZIP_EXTENSION, RATE_CENTER)

)

)
GROUP BY ADR_LINE_1,ADDRESS_TYPE,COL_NAME HAVING COUNT (DISTINCT COL_VAL)>1

)
)


SELECT VQ.LEGACY_CUST_ID,VQ.LEGACY_SITE_ID,
LISTS.ADDRESS_TYPE,LISTS.COL_LIST_DIFF_VALS ,
STD_LINE1,
CASE WHEN 
COUNT(*) OVER (PARTITION BY STD_LINE1,STD_STATE,STD_CITY,STD_ZIP) >1 
THEN 'ADDRESS DUPS IN SRC' ELSE 'NEED TO CHECK -MIGHT BE DUPS B/W CLIPS AND CSG' END AS RCA
FROM VQ_541 VQ LEFT JOIN APP_2.APP_CLIPS_ADDRESS_ELOC_SUCESS CLIPS
ON VQ.LEGACY_CUST_ID=CLIPS.accountnumber AND VQ.LEGACY_SITE_ID=CLIPS.locationid
LEFT JOIN COL_LIST LISTS ON CLIPS.STD_LINE1=LISTS.ADR_LINE_1 
WHERE CLIPS.MODIFY_DTS IS NULL  AND VQ.SOURCE_SYSTEM='CLIPS'
UNION ALL

SELECT VQ.LEGACY_CUST_ID,VQ.LEGACY_SITE_ID,
LISTS.ADDRESS_TYPE,LISTS.COL_LIST_DIFF_VALS,
STD_LINE1,
CASE WHEN 
COUNT(*) OVER (PARTITION BY STD_LINE1,STD_STATE,STD_CITY,STD_ZIP) >1
THEN 'ADDRESS DUPS IN SRC' ELSE 'NEED TO CHECK -MIGHT BE DUPS B/W CLIPS AND CSG' END AS RCA
FROM VQ_541 VQ LEFT JOIN 
(       select distinct ROOT_ACCOUNT,NVL(SBB.HSE_KEY_SBB,CSG.STD_LEGACY_LOCATIONID) LEGACY_ADDRESS_ID,
        STD_LINE1,STD_STATE,STD_CITY,STD_ZIP
        FROM APP_2.APP_CSG_SITE_ADDR_GLX_SUCESS CSG
        LEFT OUTER JOIN base_2.CSG_SBB_BASE SBB
        ON CSG.AAN = SBB.SUB_ACCT_NO_SBB
        WHERE CSG.MODIFY_DTS IS NULL 
    )CSG
ON  VQ.LEGACY_CUST_ID=CSG.ROOT_ACCOUNT  AND 
VQ.LEGACY_SITE_ID=CSG.LEGACY_ADDRESS_ID
LEFT JOIN COL_LIST LISTS ON CSG.STD_LINE1=LISTS.ADR_LINE_1 
WHERE VQ.SOURCE_SYSTEM='CSG';


-------------------82
WITH T AS (
select DISTINCT S.LEGACY_CUST_ID,a.LEGACY_ADDRESS_ID ,A.SOURCE_SYSTEM from (
SELECT LEGACY_ADDRESS_ID, SOURCE_SYSTEM,ROW_NUM 
FROM( 
SELECT /*+ PARALLEL(S,$ORA_PARALLEL)*/ 
    LEGACY_ADDRESS_ID, SOURCE_SYSTEM,ROW_NUMBER()OVER(PARTITION BY LEGACY_ADDRESS_ID ORDER BY 1) ROW_NUM   
FROM migration_10.UF_ADDRESS S
)
WHERE ROW_NUM <> 1) A , migration_10.uf_con_roles C , migration_10.uf_subscriber s 
where  A.LEGACY_ADDRESS_ID = C.LEGACY_ADDRESS_ID
and C.RECORD_LEVEL = 'S'
and C.LEGACY_ENTITY_ID = s.LEGACY_SUB_NO 
union 
select distinct S.LEGACY_CUST_ID,a.LEGACY_ADDRESS_ID,A.SOURCE_SYSTEM from (
SELECT LEGACY_ADDRESS_ID,SOURCE_SYSTEM, ROW_NUM 
FROM( 
SELECT /*+ PARALLEL(S,$ORA_PARALLEL)*/ 
    LEGACY_ADDRESS_ID, SOURCE_SYSTEM,ROW_NUMBER()OVER(PARTITION BY LEGACY_ADDRESS_ID ORDER BY 1) ROW_NUM   
FROM migration_10.UF_ADDRESS S
)
WHERE ROW_NUM <> 1) A , migration_10.uf_con_roles C , migration_10.UF_CUSTOMER s 
where  A.LEGACY_ADDRESS_ID = C.LEGACY_ADDRESS_ID
and C.RECORD_LEVEL = 'C'
and C.LEGACY_ENTITY_ID = s.LEGACY_CUST_ID)

select  T.LEGACY_CUST_ID,NVL(LOCATIONID,T.LEGACY_ADDRESS_ID) LOC_ID,
COUNT(*) OVER (PARTITION BY NVL(LOCATIONID,T.LEGACY_ADDRESS_ID)) CNT
FROM T LEFT  JOIN APP_2.APP_CLIPS_ADDRESS_ELOC_SUCESS SUCESS
ON   SUCESS.LOCATIONID=T.LEGACY_ADDRESS_ID
AND SUCESS.ACCOUNTNUMBER=T.LEGACY_CUST_ID
WHERE  SOURCE_SYSTEM='CLIPS' AND  MODIFY_DTS IS NULL
UNION ALL

SELECT T.LEGACY_CUST_ID,NVL(CSG.LEGACY_ADDRESS_ID,T.LEGACY_ADDRESS_ID),
COUNT(*) OVER (PARTITION BY NVL(CSG.LEGACY_ADDRESS_ID,T.LEGACY_ADDRESS_ID)) CNT
FROM T LEFT JOIN 
(
select  ROOT_ACCOUNT,AAN,NVL(SBB.HSE_KEY_SBB,CSG.STD_LEGACY_LOCATIONID) LEGACY_ADDRESS_ID
FROM APP_2.APP_CSG_SITE_ADDR_GLX_SUCESS CSG
LEFT OUTER JOIN BASE_1.CSG_SBB_BASE SBB
  ON CSG.AAN = SBB.SUB_ACCT_NO_SBB
   WHERE CSG.MODIFY_DTS IS NULL)CSG 
   ON 
   T.LEGACY_CUST_ID=CSG.ROOT_ACCOUNT AND
   T.LEGACY_ADDRESS_ID=CSG.LEGACY_ADDRESS_ID
   WHERE  T.SOURCE_SYSTEM='CSG';


----------688

WITH VQ_688 AS (
select distinct a.LEGACY_ADDRESS_ID, A.ADDRESS_TYPE,c.LEGACY_ENTITY_ID LEGACY_CUST_ID   from migration_10.uf_address a, migration_10.uf_con_roles  c
where GEOCODE  IS NULL 
and a.LEGACY_ADDRESS_ID = c.LEGACY_ADDRESS_ID
and c.RECORD_LEVEL = 'C'
union
select distinct a.LEGACY_ADDRESS_ID, A.ADDRESS_TYPE,t.LEGACY_CUST_ID LEGACY_CUST_ID   from migration_10.uf_address a, migration_10.uf_con_roles  c, migration_10.uf_account t
where GEOCODE  IS NULL 
and a.LEGACY_ADDRESS_ID = c.LEGACY_ADDRESS_ID
and t.LEGACY_ACCOUNT_NO = LEGACY_ENTITY_ID
and c.RECORD_LEVEL = 'A'
union
select distinct a.LEGACY_ADDRESS_ID, A.ADDRESS_TYPE,s.LEGACY_CUST_ID LEGACY_CUST_ID   from migration_10.uf_address a, migration_10.uf_con_roles  c, migration_10.UF_SUBSCRIBER s
where GEOCODE  IS NULL 
and a.LEGACY_ADDRESS_ID = c.LEGACY_ADDRESS_ID
and s.LEGACY_SUB_NO = c.LEGACY_ENTITY_ID 
and c.RECORD_LEVEL = 'S')

SELECT  LEGACY_CUST_ID,LEGACY_ADDRESS_ID,
CASE WHEN LEGACY_ADDRESS_ID IN 
(SELECT BILLING_ADDRESS_ID FROM APP_2.APP_SV_BILL_ADD_ELOC_SUCESS WHERE STD_VERTEX_CODE IS NOT NULL AND MODIFY_DTS IS NULL) 
THEN 'NEED TO CHECK'  
WHEN LEGACY_ADDRESS_ID IN 
(SELECT SITE_ADDRESS_ID FROM APP_2.APP_SV_TAX_ADD_ELOC_SUCESS WHERE STD_VERTEX_CODE IS NOT NULL AND MODIFY_DTS IS NULL) 
THEN 'NEED TO CHECK' 
WHEN ADDRESS_TYPE='S'
THEN 'NEED TO CHECK IN S LEVEL SRC'
ELSE 'GEOCODE IS NULL IN SRC' 
END AS RCA
FROM VQ_688
;


-------------------777



WITH VQ_777 AS (
select distinct legacy_entity_id as legacy_cust_id, C.LEGACY_CONTACT_ID , 
POST_OFFICE_BOX,  ADR_LINE_1 , C.legacy_site_id ,A.LEGACY_ADDRESS_ID,A.ADDRESS_TYPE
from migration_10.UF_ADDRESS A , migration_10.uf_con_roles C 
where A.LEGACY_ADDRESS_ID = C.LEGACY_ADDRESS_ID
and POST_OFFICE_BOX is not null  and POST_OFFICE_BOX <> ADR_LINE_1
and  RECORD_LEVEL='C'
union 
select distinct  legacy_cust_id, C.LEGACY_CONTACT_ID , POST_OFFICE_BOX,  ADR_LINE_1 , C.legacy_site_id,A.LEGACY_ADDRESS_ID,A.ADDRESS_TYPE
from migration_10.UF_ADDRESS A , migration_10.uf_con_roles C , migration_10.uf_subscriber S
where A.LEGACY_ADDRESS_ID = C.LEGACY_ADDRESS_ID and s.legacy_sub_no =legacy_entity_id
and POST_OFFICE_BOX is not null  and POST_OFFICE_BOX <> ADR_LINE_1
and  RECORD_LEVEL='S'
union 
select distinct  legacy_cust_id, C.LEGACY_CONTACT_ID , POST_OFFICE_BOX,  ADR_LINE_1 , C.legacy_site_id,A.LEGACY_ADDRESS_ID,A.ADDRESS_TYPE
from migration_10.UF_ADDRESS A , migration_10.uf_con_roles C , migration_10.uf_account S
where A.LEGACY_ADDRESS_ID = C.LEGACY_ADDRESS_ID and s.legacy_account_no =legacy_entity_id
and POST_OFFICE_BOX is not null  and POST_OFFICE_BOX <> ADR_LINE_1
and  RECORD_LEVEL='A')

SELECT
VQ.legacy_cust_id,LEGACY_ADDRESS_ID,ADDRESS_TYPE,POST_OFFICE_BOX,ADR_LINE_1,
CASE WHEN VQ.ADDRESS_TYPE ='B' AND (LEGACY_ADDRESS_ID,POST_OFFICE_BOX)
IN (SELECT BILLING_ADDRESS_ID,POST_OFFICE_BOX FROM APP_2.APP_SV_BILL_ADD_ELOC_SUCESS WHERE MODIFY_DTS IS NULL
        AND NVL(STD_LINE1,'XXXX')<>NVL(POST_OFFICE_BOX,'XXXX') AND BILLING_ADDRESS_ID IS NOT NULL)
THEN 'MISMATCH IN SRC'
ELSE 'NEED TO CHECK' END AS RCA
FROM VQ_777 VQ;

WITH VQ_383 AS (
SELECT /*+ PARALLEL(sub,$ORA_PARALLEL) PARALLEL(param,$ORA_PARALLEL)*/ LEGACY_CUST_ID, LEGACY_SITE_ID, SOURCE_SYSTEM,SITE_NAME, DEMARK_ADDRESS_ID 
from migration_10.UF_SITE S where DEMARK_ADDRESS_ID is not null
and NOT EXISTS (SELECT /*+ PARALLEL(sub,$ORA_PARALLEL) PARALLEL(param,$ORA_PARALLEL)*/ 1 
from migration_10.UF_ADDRESS A where A.LEGACY_ADDRESS_ID=S.DEMARK_ADDRESS_ID))

SELECT LEGACY_CUST_ID,LEGACY_SITE_ID,
CASE WHEN LEGACY_SITE_ID NOT IN (select locationid from APP_2.APP_CLIPS_ADDRESS_ELOC_SUCESS WHERE MODIFY_DTS IS NULL AND locationid IS NOT NULL)
THEN 'SITE MISSES IN CLIPS'
WHEN SOURCE_SYSTEM<>'CLIPS' THEN 'NEED TO CHECK IN OTHER SRC'
ELSE 'NEED TO CHECK' END AS RCA
FROM VQ_383;
-----------------
